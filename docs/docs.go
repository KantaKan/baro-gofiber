// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "generationth@generation.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/barometer": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics about user barometer data (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get barometer statistics",
                "responses": {
                    "200": {
                        "description": "Barometer statistics retrieved",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Error fetching data",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/admin/chart-data": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get data for charts (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get chart data",
                "responses": {
                    "200": {
                        "description": "Chart data retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "DailyReflection": {
                                        "type": "integer"
                                    },
                                    "day": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch chart data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/emoji-zone-table": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get users' zone reflections by date for the emoji zone table component (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get emoji zone table data",
                "responses": {
                    "200": {
                        "description": "Emoji zone table data retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.EmojiZoneTableData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Error fetching data",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/admin/reflections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all user reflections with pagination (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all reflections",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reflections retrieved",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.ReflectionWithUser"
                                    }
                                },
                                "success": {
                                    "type": "boolean"
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch reflections",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "success": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/reflections/chartday": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get daily barometer statistics (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get daily barometer data",
                "parameters": [
                    {
                        "type": "string",
                        "default": "90d",
                        "description": "Time range (90d, 30d, 7d)",
                        "name": "timeRange",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Barometer data retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BarometerData"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid time range",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/reflections/weekly": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a weekly summary of students in stressed or panic zones",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get weekly summary",
                "responses": {
                    "200": {
                        "description": "Weekly summary retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.WeeklySummary"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Error retrieving data",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/admin/userreflections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific user with all their reflections (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get user with reflections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User and reflections retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/services.UserWithReflections"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving data",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Users retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/api/spreadsheet-data": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all user and reflection data formatted for spreadsheet export (Admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get spreadsheet data",
                "responses": {
                    "200": {
                        "description": "Spreadsheet data retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SpreadsheetData"
                            }
                        }
                    },
                    "500": {
                        "description": "Error retrieving data",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/api/verify-token": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verify if the provided JWT token is valid",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify JWT token",
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "role": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid token claims",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "loginData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "role": {
                                                    "type": "string"
                                                },
                                                "token": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating user",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user profile by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/reflections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all reflections for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reflections"
                ],
                "summary": "Get user reflections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reflections retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Reflection"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Error retrieving reflections",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new reflection for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reflections"
                ],
                "summary": "Create reflection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reflection data",
                        "name": "reflection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reflection"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Reflection created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.StandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Reflection"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    },
                    "409": {
                        "description": "Already submitted reflection today",
                        "schema": {
                            "$ref": "#/definitions/utils.StandardResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BarometerData": {
            "type": "object",
            "properties": {
                "Comfort Zone": {
                    "type": "integer"
                },
                "Panic Zone": {
                    "type": "integer"
                },
                "Stretch Zone - Enjoying the Challenges": {
                    "type": "integer"
                },
                "Stretch Zone - Overwhelmed": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "models.EmojiZoneEntry": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "models.EmojiZoneTableData": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EmojiZoneEntry"
                    }
                },
                "zoomname": {
                    "type": "string"
                }
            }
        },
        "models.Reflection": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Added for daily reflection limit",
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "day": {
                    "description": "Custom field for day, could be a date or unique identifier",
                    "type": "string"
                },
                "reflection": {
                    "description": "Renamed for clarity",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ReflectionContent"
                        }
                    ]
                },
                "user_id": {
                    "description": "Reference to the user",
                    "type": "string"
                }
            }
        },
        "models.ReflectionContent": {
            "type": "object",
            "properties": {
                "barometer": {
                    "type": "string"
                },
                "non_tech_sessions": {
                    "$ref": "#/definitions/models.SessionDetails"
                },
                "tech_sessions": {
                    "$ref": "#/definitions/models.SessionDetails"
                }
            }
        },
        "models.ReflectionWithUser": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "jsdNumber": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "reflection": {
                    "type": "object",
                    "properties": {
                        "barometer": {
                            "type": "string"
                        },
                        "nonTechSessions": {
                            "type": "object",
                            "properties": {
                                "happy": {
                                    "type": "string"
                                },
                                "improve": {
                                    "type": "string"
                                },
                                "sessionName": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "techSessions": {
                            "type": "object",
                            "properties": {
                                "happy": {
                                    "type": "string"
                                },
                                "improve": {
                                    "type": "string"
                                },
                                "sessionName": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "models.SessionDetails": {
            "type": "object",
            "properties": {
                "happy": {
                    "type": "string"
                },
                "improve": {
                    "type": "string"
                },
                "session_name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SpreadsheetData": {
            "type": "object",
            "properties": {
                "barometer": {
                    "type": "string"
                },
                "cohortNumber": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "jsdNumber": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nonTechHappy": {
                    "type": "string"
                },
                "nonTechImprove": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "reflectionDate": {
                    "type": "string"
                },
                "reflectionDay": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "techHappy": {
                    "type": "string"
                },
                "techImprove": {
                    "type": "string"
                }
            }
        },
        "models.StudentInfo": {
            "type": "object",
            "properties": {
                "barometer": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "jsd_number": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "description": "MongoDB generated ID",
                    "type": "string"
                },
                "cohort_number": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "genmate_group": {
                    "description": "New field for genmate group",
                    "type": "string"
                },
                "jsd_number": {
                    "description": "JSD Number เลขที่นักเรียน",
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "project_group": {
                    "description": "New field for project group",
                    "type": "string"
                },
                "reflections": {
                    "description": "This is where the reflections should be",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Reflection"
                    }
                },
                "role": {
                    "description": "Add role field (admin/user)",
                    "type": "string"
                },
                "zoom_name": {
                    "description": "New field for Zoom name",
                    "type": "string"
                }
            }
        },
        "models.WeeklySummary": {
            "type": "object",
            "properties": {
                "overwhelmed_students": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StudentInfo"
                    }
                },
                "stressed_students": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StudentInfo"
                    }
                },
                "week_end_date": {
                    "type": "string"
                },
                "week_start_date": {
                    "type": "string"
                }
            }
        },
        "services.UserWithReflections": {
            "type": "object",
            "properties": {
                "reflections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Reflection"
                    }
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "utils.StandardResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter your bearer token in the format **Bearer \u003ctoken\u003e**",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Generation Barometer API",
	Description:      "API Server for Generation Barometer Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
